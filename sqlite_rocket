#!/bin/bash
#
# $Id: sqlite_rocket,v 1.2 2014/08/05 02:31:43 condor Exp condor $ 
#
# File    : skyrocket.sh 
# Purpose : Slightly less primative than using your toes cli sqlite3 tool. 
#         : contents of a database.
# Date    : 05/17/14
# Author  : condor 
#
# GUFI: 527c17e35fbb04.54787666:527c17e47ee505.32926663:110713:174451EST
#       5283a5ec981d31.63309163:5283a5edbea555.97391173:111213:111644EST
#       528bdaf286bbf7.29235535:528bdaf4284cc7.39687120:111913:164106EST
# 	53a625c4622263.37230699:53a6260ccd8d58.24488919:20140622:024100UTC

BUGGY=0
VERBOSE=0

# Note: 
#        8/4/14 GUFI is on the back burner until the code is on Github.

# To Do:
#        8/4/14 1. Change ABSOLUTE_DATABASE_PATH to something more managable such as DB_LOCATION.
#               2. Complete set of ANSI Escapes.
#		3. The Keyboard Navigation is from the net, I saved a  pdf of the posting.
#                  When I find the pdf I give credit where do.  
#            

# Discussion:
#
#      This works and is only terrible and only blaringly slobby.  The two interfaces came 
# about organically in several hack sessions and should be designed before proceeding much 
# further:
#          nav api     - user level function call is still incomplete 
#          stack_* api - is incorrect named.  This should be a circular queue. 
#
# 
#                        1. Something like is needed: 
#
#				stack_new_location () {
#					stack_push $PWD
#					stack_stow $PWD
#				}
#                            Though named cqueue_new_loc () or something similiar.
#                        2. Sorting the queue needs to be acomplished.  
#                        3. Speeding navigation needs to thought out.  
#
#           The Edge of the Universe:
#                        1. Entity Relationship analysis of a database that not 
#                           only saves locations put tracks directory changes.  
#                           Activity logging and integration with ctags (maybe).
#                           This database should also be GUFI aware.
#                        2. an Sqlite3 interface to help manage inline Sql.
#                           The idea might be based on "a mask" of the table definition. 
							 
(($VERBOSE)) && {
	echo -e "\\033[34mFile:\\033[0m     $0"
	echo -e "\\033[34mLocation:\\033[0m $PWD"
} > /dev/stdout




init_aliases_xxx () {

# bash_aliases is the focus this sourcing because, for now, cfs_select () 
# is located in this file.  cfs_select () should reside in bash_tui.

	ALIASLOCATIONS[0]=$PWD/bash_aliases	
	# ALIASLOCATIONS[1]=/home/continental/bin/bash_aliases
	# ALIASLOCATIONS[2]=/run/media/condor/567fba76-1c0a-49d5-9373-710fc2a5b85c/home/continental/bin/bash_aliases

	for alias in ${ALIASLOCATIONS[@]}; do 

		(($VERBOSE)) && echo "DEBUG: alias location: $alias" > /dev/stdout
		if [ -f $alias ]; then

			(($VERBOSE)) && echo "DEBUG: sourcing $alias"
			. $alias
			break
		fi
	done
}





init_db_location_xxx () {



	DBLOCATIONS[0]=$PWD/superNavigator.db
	ABSOLUTE_DATABASE_PATH=$PWD/superNavigator.db

if [ 0 -eq 1 ];then 
	DBLOCATIONS[1]=/home/condor/.cfs/superNavigator.db
	DBLOCATIONS[2]=/run/media/condor/567fba76-1c0a-49d5-9373-710fc2a5b85c/home/condor/.cfs/superNavigator.db

	for db in ${DBLOCATIONS[@]}; do 

		(($VERBOSE)) && echo "DEBUG: db location: $db" > /dev/stdout

		if [ -f $db ]; then
			ABSOLUTE_DATABASE_PATH=$db
			break
		fi
	done
fi

}

db_location () {

	echo $ABSOLUTE_DATABASE_PATH
}

long_help () {
	:
}



function cfs_select () {
BUGGY=1

CFS_SELECTION=""
LINELENGTH=80
LEFTMARGINLENGTH=8

LOCALDIR_REPO='.RCS'
FILESYSTEM_REPO='/var/cache/cfs/rcs'

for (( x = 0 ; $x < $LINELENGTH; x++ )) ; do
	BLANKLINE=${BLANKLINE}"\\040"
done

for (( x = 0 ; $x < $LEFTMARGINLENGTH; x++ )) ; do
	LEFTMARGIN=${LEFTMARGIN}"\\040"
done


	echo -e "\\033[31mDEBUG\\033[0m\\040/home/continental/bin/bash_aliases cfs_select() $1 $@"

	IFS=$'\t\n'
	
	SELECTIONS=( 'Exit' ${@} )
	LAST_ASSIGNED_INDEX=${#SELECTIONS[@]}
	

	SELECTION_PROCESS='INCOMPLETE'


	while [[ $SELECTION_PROCESS == 'INCOMPLETE' ]]; do 
		index=0
	
			echo -e "${LEFTMARGIN}\\033[1;44m\\040${BLANKLINE}\\033[1;0m"
		for directory in ${SELECTIONS[@]}; do

			echo -e "${LEFTMARGIN}\\033[1;44m\\040${BLANKLINE}\\033[1;0m\\033[1A"
			echo -e "${LEFTMARGIN}\\033[1;44;36m $index  \\033[1;37m$directory\\033[1;0m"

			index=$(($index+1))
		done

			echo -e "${LEFTMARGIN}\\033[1;44m\\040${BLANKLINE}\\033[1;0m"
			echo -en "${LEFTMARGIN}"

	
		read -p"Make a Selection: " selection

		if  [ -z "$selection" ]; then
			echo "selection not set"
			selection=0
	
		else
			echo "selection: $selection"
			echo ${#selection}
			echo "selection set"
		fi
		if [[ $selection -ge $BASE ]] && [[ $selection -le $index ]]; then

			echo "DEBUG: selection within limits"

			SELECTION_PROCESS='COMPLETE'
			CFS_SELECTION=${SELECTIONS[$selection]}
		fi

		echo "*** $selection"
		echo "*** $LAST_ASSIGNED_INDEX"

		if [ $selection -eq $LAST_ASSIGNED_INDEX ]; then
			SELECTION_PROECESS='COMPLETE'
		fi
	done
	IFS=$' \t\n'
}


backup_database () {
	cp   $ABSOLUTE_DATABASE_PATH  $ABSOLUTE_DATABASE_PATH-backup

}


delete_database () {
	rm   $ABSOLUTE_DATABASE_PATH
}

launch_rocket_menu () {


	# db_location

	CREATE=0
	BACKUP=1
	DELETE=2
	CONSOLE=3
	EDIT=4

	MENU=( "Create database" "Backup database" "Delete database" "Sqlite3 Console"  "Edit Table Definition File" )

	while [ "$CFS_SELECTION" != "Exit" ]; do

		cfs_select "${MENU[@]}"

		case  "$CFS_SELECTION" in 

			"${MENU[${CREATE}]}" )
				echo "DEBUG: ${MENU[0]}"
				CFS_SELECTION="Exit"
			
				cat create-database.sql | sqlite3 $ABSOLUTE_DATABASE_PATH
				cat create-tables.sql | sqlite3 $ABSOLUTE_DATABASE_PATH


			;; 

			"${MENU[${BACKUP}]}" )

				backup_database 
				echo "DEBUG: ${MENU[1]}"
				CFS_SELECTION="Exit"
			;;


			"${MENU[${DELETE}]}" )

				# delete_database 
				echo "DEBUG: ${MENU[2]}"
				CFS_SELECTION="Exit"
			;;

			"${MENU[${CONSOLE}]}" )

				if [ -f $ABSOLUTE_DATABASE_PATH ]; then
					sqlite3 $ABSOLUTE_DATABASE_PATH

				else
					echo "No databasee file present"
				fi


				CFS_SELECTION="Exit"
			;;

			"${MENU[${EDIT}]}" )

				if [ -f create-tables.sql ]; then
					vim create-tables.sql 
				else
					echo "No table definition file present"
				fi
				CFS_SELECTION="Exit"
			;;
		esac
	done

} # launch_rocket_menu () 

# Function: launch_rocket_cli_parser ()
# Purpose:  Read and respond to the command line interface to the sqlite rocket engine.
# Author:   condor
# Date:     8/4/14

# Note: That the use of the sqlite3 utility is simply an exercise and may change in future versions.
# Performance and security are both considerations is when and how this change may take place.

launch_rocket_cli_parser () {

	local BUGGY=1
	local VERBOSE=0
	local ABSOLUTE_DATABASE_PATH=/home/condor/bin/SuperNavigator.db

	# Beware of fragile redirections here!  Experiments with alternatives are being done in sandbox.sh.  

	(($BUGGY)) && {
		# echo "BUGGY (sqlite_rocket), launch_rocket_cli_parser ():  Entering function" 
		echo "BUGGY (sqlite_rocket), launch_rocket_cli_parser ():  Entering function"
		echo "BUGGY (sqlite_rocket), launch_rocket_cli_parser ():  \$ABSOLUTE_DATABASE_PATH: $ABSOLUTE_DATABASE_PATH"
	} > /dev/stderr


	if [ $# -eq 1 ]; then

		(($BUGGY)) && echo "BUGGY (sqlite_rocket), launch_rocket_cli_parser ():  Argument: $1" > /dev/stderr

		if [ $1 == "--configure" ]; then

			(($BUGGY)) && echo "BUGGY (sqlite_rocket), launch_rocket_cli_parser ():  configure" > /dev/stderr

		elif [ $1 == "--help" ] || [ $1 == "-h" ]; then
			long_help

			(($BUGGY)) && echo "BUGGY (sqlite_rocket), launch_rocket_cli_parser ():  Help" > /dev/stderr

		elif [ $1 == "--populate" ]; then 

			(($BUGG)) && echo "BUGGY (sqlite_rocket), launch_rocket_cli_parser ():  populate" > /dev/stderr
			echo "SELECT directory FROM Directory;" | sqlite3  	$ABSOLUTE_DATABASE_PATH 2> sqlite.out

			# echo "Error Value: $?" > /dev/stderr
	
			(($?)) && {
				echo -n "sqlite3 reported error:"
				cat sqlite.out
			}  > /dev/stderr

			rm sqlite.out
		elif [ $1 == "--delete" ]; then

				(($BUGGY)) && echo "BUGGY (sqlite_rocket), launch_rocket_cli_parser ():  delete" > /dev/stderr
				echo "DELETE FROM Directory;" | sqlite3 	$ABSOLUTE_DATABASE_PATH

		fi

		
	elif [ $# -eq 2 ]; then

		(($BUGGY)) && echo "BUGGY (sqlite_rocket), launch_rocket_cli_parser ():  Arguments: $@" > /dev/stderr

		if [ $1 == "--push" ]; then

			sqlite.out=`echo "INSERT INTO Directory VALUES (\"$2\", \"\", NULL );" | sqlite3 	$ABSOLUTE_DATABASE_PATH `

			(($?)) && echo "sqlite3 reported error: \"$sqlite.out\""


		fi
	fi

	(($BUGGY)) && echo "Returning from launch_rocket_cli_parser()" > /dev/stderr
} # launch_rocket_cli_parser () 

# init_aliases
# init_db_location

if [ $# -eq 0 ]; then
	launch_rocket_menu
else
	launch_rocket_cli_parser $@
fi

# $Log: sqlite_rocket,v $
# Revision 1.2  2014/08/05 02:31:43  condor
# Added a discussion and some comments for the future direction of this file.
#
# Revision 1.1  2014/08/05 01:33:34  condor
# Initial revision
#
# Revision 1.4  2014/07/08 21:24:09  condor
# I've added a help function.
#
# Revision 1.3  2014/07/08 17:21:32  condor
# Added an array to keep track of where to look for ourself while on different devices.
#
# Revision 1.2  2014/07/01 14:15:17  condor
# *** empty log message ***
#
# Revision 1.1  2014/06/22 00:46:57  condor
# Initial revision
#
# Revision 1.1  2014/06/22 00:43:02  condor
# Initial revision
#
# Revision 1.1  2014/05/27 19:25:12  root
# Initial revision
#
# 
